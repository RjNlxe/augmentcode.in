'use client'

import { useState, useCallback } from 'react'
import { Upload, FileText, Package, Code, Download, Sparkles, CheckCircle, AlertCircle, X } from 'lucide-react'
import Link from 'next/link'

export default function GeneratePage() {
  const [uploadedFiles, setUploadedFiles] = useState<File[]>([])
  const [isGenerating, setIsGenerating] = useState(false)
  const [generatedFiles, setGeneratedFiles] = useState<string[]>([])
  const [dragActive, setDragActive] = useState(false)

  const supportedFiles = [
    { name: '.augmentrules', icon: <Sparkles className="w-5 h-5" />, desc: 'Augment configuration files' },
    { name: 'package.json', icon: <Package className="w-5 h-5" />, desc: 'Node.js project dependencies' },
    { name: 'requirements.txt', icon: <FileText className="w-5 h-5" />, desc: 'Python project dependencies' },
    { name: 'Cargo.toml', icon: <Code className="w-5 h-5" />, desc: 'Rust project configuration' },
    { name: 'pom.xml', icon: <FileText className="w-5 h-5" />, desc: 'Maven project configuration' },
    { name: 'composer.json', icon: <Package className="w-5 h-5" />, desc: 'PHP project dependencies' }
  ]

  const handleDrag = useCallback((e: React.DragEvent) => {
    e.preventDefault()
    e.stopPropagation()
    if (e.type === "dragenter" || e.type === "dragover") {
      setDragActive(true)
    } else if (e.type === "dragleave") {
      setDragActive(false)
    }
  }, [])

  const handleDrop = useCallback((e: React.DragEvent) => {
    e.preventDefault()
    e.stopPropagation()
    setDragActive(false)
    
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      const files = Array.from(e.dataTransfer.files)
      setUploadedFiles(prev => [...prev, ...files])
    }
  }, [])

  const handleFileInput = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      const files = Array.from(e.target.files)
      setUploadedFiles(prev => [...prev, ...files])
    }
  }

  const removeFile = (index: number) => {
    setUploadedFiles(prev => prev.filter((_, i) => i !== index))
  }

  const generateMDCFiles = async () => {
    if (uploadedFiles.length === 0) {
      alert('Please upload at least one project file')
      return
    }

    setIsGenerating(true)
    try {
      // Simulate file processing
      await new Promise(resolve => setTimeout(resolve, 3000))
      
      // Generate mock .mdc files based on uploaded files
      const mockFiles = uploadedFiles.map(file => {
        const baseName = file.name.split('.')[0]
        return `${baseName}-rules.mdc`
      })
      
      setGeneratedFiles(mockFiles)
    } catch (error) {
      console.error('Error generating files:', error)
      alert('Failed to generate .mdc files. Please try again.')
    } finally {
      setIsGenerating(false)
    }
  }

  const downloadFile = (fileName: string) => {
    // Mock download functionality
    const content = `# ${fileName}\n\nGenerated rules for your project.\n\n## Rules\n\n1. Follow best practices\n2. Maintain code quality\n3. Write comprehensive tests\n4. Document your code\n\nGenerated by Augment Code AI`
    
    const blob = new Blob([content], { type: 'text/markdown' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = fileName
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  return (
    <div className="min-h-screen bg-black text-white">
      {/* Header */}
      <header className="border-b border-gray-800 p-6">
        <div className="max-w-6xl mx-auto flex items-center justify-between">
          <Link href="/" className="flex items-center space-x-3">
            <div className="w-8 h-8 bg-white rounded-lg flex items-center justify-center">
              <Sparkles className="w-5 h-5 text-black" />
            </div>
            <span className="text-xl font-bold">augmentcode</span>
          </Link>
          
          <nav className="flex items-center space-x-6">
            <Link href="/rules" className="text-gray-400 hover:text-white transition-colors">Rules</Link>
            <Link href="/mcp" className="text-gray-400 hover:text-white transition-colors">MCP</Link>
            <Link href="/home" className="text-gray-400 hover:text-white transition-colors">Platform</Link>
          </nav>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-6xl mx-auto p-8">
        {/* Hero Section */}
        <div className="text-center mb-12">
          <h1 className="text-5xl font-black mb-4">
            Generate Augment Project Rules
          </h1>
          <p className="text-xl text-gray-400 max-w-3xl mx-auto">
            Generate the new .mdc files for your project by uploading your .augmentrules, package.json, requirements.txt, or other project files.
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-12">
          {/* Upload Section */}
          <div className="space-y-8">
            {/* File Upload Area */}
            <div
              className={`relative border-2 border-dashed rounded-2xl p-12 text-center transition-all duration-300 ${
                dragActive 
                  ? 'border-white bg-gray-900' 
                  : 'border-gray-700 hover:border-gray-600'
              }`}
              onDragEnter={handleDrag}
              onDragLeave={handleDrag}
              onDragOver={handleDrag}
              onDrop={handleDrop}
            >
              <input
                type="file"
                multiple
                onChange={handleFileInput}
                className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                accept=".augmentrules,.json,.txt,.toml,.xml"
              />
              
              <div className="space-y-4">
                <div className="w-16 h-16 bg-gray-800 rounded-2xl flex items-center justify-center mx-auto">
                  <Upload className="w-8 h-8 text-gray-400" />
                </div>
                <div>
                  <h3 className="text-xl font-semibold mb-2">
                    Drag and drop your project files
                  </h3>
                  <p className="text-gray-400">
                    or click to browse files
                  </p>
                </div>
              </div>
            </div>

            {/* Supported Files */}
            <div>
              <h3 className="text-lg font-semibold mb-4">Supported File Types</h3>
              <div className="grid grid-cols-1 gap-3">
                {supportedFiles.map((file, index) => (
                  <div key={index} className="flex items-center space-x-3 p-3 bg-gray-900 rounded-xl">
                    <div className="text-gray-400">
                      {file.icon}
                    </div>
                    <div>
                      <div className="font-medium">{file.name}</div>
                      <div className="text-sm text-gray-400">{file.desc}</div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Results Section */}
          <div className="space-y-8">
            {/* Uploaded Files */}
            {uploadedFiles.length > 0 && (
              <div>
                <h3 className="text-lg font-semibold mb-4">Uploaded Files</h3>
                <div className="space-y-2">
                  {uploadedFiles.map((file, index) => (
                    <div key={index} className="flex items-center justify-between p-3 bg-gray-900 rounded-xl">
                      <div className="flex items-center space-x-3">
                        <FileText className="w-5 h-5 text-gray-400" />
                        <span className="font-medium">{file.name}</span>
                        <span className="text-sm text-gray-400">
                          ({(file.size / 1024).toFixed(1)} KB)
                        </span>
                      </div>
                      <button
                        onClick={() => removeFile(index)}
                        className="text-gray-400 hover:text-red-400 transition-colors"
                      >
                        <X className="w-4 h-4" />
                      </button>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Generate Button */}
            <button
              onClick={generateMDCFiles}
              disabled={isGenerating || uploadedFiles.length === 0}
              className="w-full bg-white hover:bg-gray-100 disabled:bg-gray-800 disabled:text-gray-500 text-black font-semibold py-4 px-6 rounded-xl transition-all duration-300 flex items-center justify-center space-x-3"
            >
              {isGenerating ? (
                <>
                  <div className="w-5 h-5 border-2 border-gray-400 border-t-transparent rounded-full animate-spin" />
                  <span>Generating .mdc files...</span>
                </>
              ) : (
                <>
                  <Sparkles className="w-5 h-5" />
                  <span>Generate .mdc Files</span>
                </>
              )}
            </button>

            {/* Generated Files */}
            {generatedFiles.length > 0 && (
              <div>
                <h3 className="text-lg font-semibold mb-4 flex items-center space-x-2">
                  <CheckCircle className="w-5 h-5 text-green-400" />
                  <span>Generated Files</span>
                </h3>
                <div className="space-y-2">
                  {generatedFiles.map((fileName, index) => (
                    <div key={index} className="flex items-center justify-between p-3 bg-green-900/20 border border-green-800 rounded-xl">
                      <div className="flex items-center space-x-3">
                        <FileText className="w-5 h-5 text-green-400" />
                        <span className="font-medium">{fileName}</span>
                      </div>
                      <button
                        onClick={() => downloadFile(fileName)}
                        className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition-colors flex items-center space-x-2"
                      >
                        <Download className="w-4 h-4" />
                        <span>Download</span>
                      </button>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </div>
      </main>
    </div>
  )
}
